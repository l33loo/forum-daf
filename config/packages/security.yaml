security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider

    providers:
        user_repository:
            id: App\Infrastructure\Doctrine\User\DoctrineUserRepository
    firewalls:
        api_token:
            pattern: ^/token$
            security: false

        api:
            pattern: ^/api
            security: true
            stateless: true
            oauth2: true
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js|static)/
            security: false
        main:
            provider: user_repository
            lazy: true
            remember_me:
                secret: '%kernel.secret%' # required

            form_login:
                enable_csrf: true
                use_referer: true
                login_path: login
                check_path: login
            logout:
                path: /user/logout

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/authorize, roles: IS_AUTHENTICATED_REMEMBERED }
        - { path: ^/user/register, roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
